from flask import Flask, request, render_template, make_response, session, redirect, url_for, flash
import sqlite3
import os
import random
import string
from datetime import datetime
from functools import wraps
import html

app = Flask(__name__)
app.secret_key = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(32))

ADMIN_USERNAME = os.environ.get('ADMIN_USERNAME', 'admin')
ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD', ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(16)))

FLAG = os.environ.get('FLAG', 'Spark{G00d_J0B_K1nG_Y0u_4R3_C00k1nGG_1ZSQMLK9LQSX21}')

from initialize_db import initialize_db

def log_search(query):
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_agent = request.headers.get('User-Agent', 'Unknown')
    
    sanitized_query = html.escape(query)
    sanitized_user_agent = html.escape(user_agent)
    
    cursor.execute('INSERT INTO search_logs (query, timestamp, user_agent) VALUES (?, ?, ?)',
                  (sanitized_query, timestamp, sanitized_user_agent))
    conn.commit()
    conn.close()

@app.before_first_request
def before_first_request():
    initialize_db(ADMIN_USERNAME, ADMIN_PASSWORD, FLAG)

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'logged_in' not in session or not session['logged_in'] or session.get('role') != 'admin':
            return redirect(url_for('admin_login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/accounts')
def accounts():
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, account_number, customer_name, balance, account_type FROM accounts")
    accounts = cursor.fetchall()
    conn.close()
    
    return render_template('accounts.html', accounts=accounts)

@app.route('/search')
def search():
    query = request.args.get('q', '')
    
    log_search(query)
    
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    
    sql_query = f"SELECT account_number, customer_name, balance, account_type FROM accounts WHERE account_number LIKE '%{query}%' OR customer_name LIKE '%{query}%' OR account_type LIKE '%{query}%'"
    
    try:
        cursor.execute(sql_query)
        results = cursor.fetchall()
    except sqlite3.Error as e:
        results = []
        error = str(e)
        return render_template('search.html', query=html.escape(query), results=results, error=html.escape(error))
    
    conn.close()
    
    return render_template('search.html', query=html.escape(query), results=results)

@app.route('/admin', methods=['GET'])
def admin_login():
    if 'logged_in' in session and session['logged_in'] and session.get('role') == 'admin':
        return redirect(url_for('admin_dashboard'))
    return render_template('admin/login.html')

@app.route('/admin/login', methods=['POST'])
def admin_login_post():
    username = request.form.get('username')
    password = request.form.get('password')
    
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, role FROM users WHERE username = ? AND password = ?", (username, password))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        session['logged_in'] = True
        session['user_id'] = user[0]
        session['role'] = user[1]
        return redirect(url_for('admin_dashboard'))
    else:
        flash('Invalid credentials', 'error')
        return redirect(url_for('admin_login'))

@app.route('/admin/dashboard')
@admin_required
def admin_dashboard():
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, query, timestamp, user_agent FROM search_logs ORDER BY id DESC LIMIT 10")
    raw_logs = cursor.fetchall()
    conn.close()
    
    logs = []
    for log in raw_logs:
        logs.append((
            log[0],
            html.escape(log[1]),  
            log[2],               
            html.escape(log[3])   
        ))
    
    return render_template('admin/dashboard.html', logs=logs)

@app.route('/admin/logs/clear', methods=['POST'])
@admin_required
def clear_logs():
    conn = sqlite3.connect('bank.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM search_logs")
    conn.commit()
    conn.close()
    
    flash('Logs cleared successfully', 'success')
    return redirect(url_for('admin_dashboard'))

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

@app.errorhandler(404)
def page_not_found(e):
    return render_template('error.html', error="404 - Page Not Found"), 404

@app.errorhandler(500)
def internal_server_error(e):
    return render_template('error.html', error="500 - Internal Server Error"), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=7021, debug=False)
