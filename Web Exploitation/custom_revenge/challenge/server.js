import jwt from 'jsonwebtoken';
import fs from 'fs';
import cookieParser from 'cookie-parser';
import express from 'express';
import session from 'express-session';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import puppeteer from 'puppeteer';
import dotenv from 'dotenv';

dotenv.config();

const __dirname = dirname(fileURLToPath(import.meta.url));
const app = express();
const host = '0.0.0.0';
const port = 4069;
const publicUrl = `http://${host}:${port}`;

const SECRET_KEY = "Th3n0rthfac3";

app.use(cookieParser());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.use(session({
  secret: 'super-secret-key',
  resave: false,
  saveUninitialized: true
}));

const ADMIN_SECRET = "Spark{C55_1jn3ct10n_15_4w3s0m333_1sn't???}";
const userThemes = new Map();

app.use((req, res, next) => {
  res.setHeader("Content-Security-Policy", 
    "default-src 'none'; " +
    "style-src 'self' 'unsafe-inline'; " +
    "img-src *; " +
    "base-uri 'none'; " +
    "object-src 'none'; " +
    "script-src 'none'; " +
    "connect-src 'none'; " +
    "frame-src 'none'; " +
    "font-src 'none';"
  );
  next();
});

function sanitizeInput(input) {
  const blacklist = /(script|alert|onerror|onload|iframe|object|embed|src|javascript:|data:|<|>)/gi;
  return input.replace(blacklist, '');
}

function requireAdmin(req, res, next) {
  const token = req.cookies.token;
  
  if (!token) {
    return res.status(401).send('idk');
  }

  try {
    const decodedHeader = JSON.parse(Buffer.from(token.split('.')[0], 'base64').toString());
    let decoded;

    decoded = jwt.verify(token, SECRET_KEY, { algorithms: ['HS256'] });
    
    if (decoded.role !== 'admin') {
      return res.status(403).send('idk');
    }

    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).send('idk');
  }
}

function generateAdminToken() {
  const payload = {
    role: 'admin',
    username: 'admin',
  };

  let token = jwt.sign(payload, SECRET_KEY, { algorithm: 'HS256' });
  return token;
}

async function adminBot(themeId) {
  const browser = await puppeteer.launch({
    headless: 'new',
    args: ['--no-sandbox']
  });
  const token = generateAdminToken();

  try {
    const page = await browser.newPage();
    
    await page.setCookie({
      name: 'admin',
      value: 'youwillneverknowthecookieneeded',
      domain: host,
      httpOnly: true,
    });
    await page.setCookie({
      name: 'token',
      value: token,
      domain: host,
      httpOnly: true,
    });

    await page.goto(`${publicUrl}/preview/${themeId}`);
    await new Promise(resolve => setTimeout(resolve, 3000)); // Wait 3 seconds for the page to load
  } finally {
    await browser.close();
  }
}

app.get('/', requireAdmin, (req, res) => {
  res.sendFile(join(__dirname, 'public', 'index.html'));
});

app.post('/submit', requireAdmin, (req, res) => {
  let { name, theme } = req.body;

  name = sanitizeInput(name);
  theme = sanitizeInput(theme);

  const themeId = Date.now().toString(36) + Math.random().toString(36).substr(2);
  
  userThemes.set(themeId, {
    name,
    theme,
    views: 0
  });

  adminBot(themeId);

  res.redirect(`/preview/${themeId}`);
});

app.get('/preview/:themeId', requireAdmin, (req, res) => {
  const themeData = userThemes.get(req.params.themeId);
  if (!themeData) {
    return res.status(404).send('Theme not found');
  }

  const isAdmin = ((req.cookies.admin === 'youwillneverknowthecookieneeded') && (req.connection.remoteAddress == "127.0.0.1"));
  themeData.views++;

  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Custom Revenge</title>
      <style>
        ${themeData.theme}
      </style>
    </head>
    <body>
      <div class="profile">
        <h1>Welcome, ${themeData.name}!</h1>
        <p>Theme views: ${themeData.views}</p>
        ${isAdmin ? `<div id="admin-panel" data-content="${ADMIN_SECRET}"></div>` : ''}
      </div>
    </body>
    </html>
  `);
});

app.listen(port, host, () => {
  console.log(`Server running at ${publicUrl}`);
});

