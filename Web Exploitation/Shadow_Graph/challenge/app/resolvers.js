const database = require('./database');
const crypto = require('crypto');


function searchProjects(args) {
  const db = database.getDb();
  
  const query = `
    SELECT p.id, p.name, p.description, p.isSecret 
    FROM projects p 
    WHERE p.name LIKE '%${args.query}%' OR p.description LIKE '%${args.query}%'
  `;
  
  try {
    const projects = db.prepare(query).all();
    return projects.map(p => ({
      ...p,
      isSecret: Boolean(p.isSecret),
      secrets: getSecretsByProjectId(p.id) 
    }));
  } catch (error) {
    console.error('Error in searchProjects:', error);
    return [];
  }
}

function getUser(args) {
  const db = database.getDb();
  const user = db.prepare('SELECT id, username, role FROM users WHERE id = ?').get(args.id);
  return user;
}

function getUsers() {
  const db = database.getDb();
  return db.prepare('SELECT id, username, role FROM users').all();
}

function getProject(args) {
  const db = database.getDb();
  const project = db.prepare('SELECT id, name, description, isSecret FROM projects WHERE id = ?').get(args.id);
  
  if (project) {
    project.isSecret = Boolean(project.isSecret);
    
    project.secrets = getSecretsByProjectId(project.id);
  }
  
  return project;
}

function getPublicProjects() {
  const db = database.getDb();
  const projects = db.prepare('SELECT id, name, description, isSecret FROM projects WHERE isSecret = 0').all();
  
  return projects.map(p => ({
    ...p,
    isSecret: Boolean(p.isSecret),
    secrets: getSecretsByProjectId(p.id)
  }));
}

function getSecretsByProjectId(projectId) {
  const db = database.getDb();
 
  return db.prepare('SELECT id, name, content, projectId FROM secrets WHERE projectId = ?').all(projectId);
}

function login(args) {
  const { username, password } = args;
  const db = database.getDb();
  
  
  const hashedPassword = crypto.createHash('md5').update(password).digest('hex');
  
  const user = db.prepare('SELECT id, username, role FROM users WHERE username = ? AND password = ?')
    .get(username, hashedPassword);
  
  if (user) {
    
    const token = Buffer.from(`${user.id}:${user.username}:${Date.now()}`).toString('base64');
    return { token, user };
  }
  
  return null;
}

module.exports = {
  user: getUser,
  users: getUsers,
  project: getProject,
  publicProjects: getPublicProjects,
  searchProjects: searchProjects,
  login: login
};