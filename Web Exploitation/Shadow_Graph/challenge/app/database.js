const sqlite = require('better-sqlite3');
const fs = require('fs');
const path = require('path');

let db;  

function init() {
 
  const dataDir = path.join(__dirname, 'data');
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir);
  }

 
  db = new sqlite(path.join(dataDir, 'shadow.db'));

  db.exec(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY,
      username TEXT UNIQUE,
      password TEXT,
      role TEXT
    );
    CREATE TABLE IF NOT EXISTS projects (
      id INTEGER PRIMARY KEY,
      name TEXT,
      description TEXT,
      isSecret INTEGER
    );

    CREATE TABLE IF NOT EXISTS secrets (
      id INTEGER PRIMARY KEY,
      name TEXT,
      content TEXT,
      projectId INTEGER,
      FOREIGN KEY(projectId) REFERENCES projects(id)
    );
  `);

  const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
  if (userCount === 0) {
    db.exec(`
      INSERT INTO users (username, password, role) VALUES
        ('admin', 'f7352c3e9d9ec0d9ea77f7a53508f94a', 'admin'),
        ('guest', '084e0343a0486ff05530df6c705c8bb4', 'guest');

      INSERT INTO projects (name, description, isSecret) VALUES
        ('Project Alpha', 'Public project for testing', 0),
        ('Project Beta', 'Another public project', 0),
        ('Project Omega', 'Highly classified project', 1);

      INSERT INTO secrets (name, content, projectId) VALUES
        ('API Key', 'public-api-key-123', 1),
        ('Test Credentials', 'user:password', 2),
        ('Flag', '${process.env.FLAG || "Spark{F4st1ng_Is_G00d_But_Exp0sIng_Qu3r13s_Is_N0t}"}', 3);
    `);
  }
}

function getDb() {
  if (!db) {
    throw new Error('Database not initialized');
  }
  return db;
}

module.exports = {
  init,
  getDb
};
