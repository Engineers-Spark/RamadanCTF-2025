const express = require('express');
const { graphqlHTTP } = require('express-graphql');
const { buildSchema } = require('graphql');
const sqlite3 = require('sqlite3').verbose();
const session = require('express-session');
const bodyParser = require('body-parser');
const path = require('path');


const db = new sqlite3.Database('./database.db');

// Create tables and insert initial data
db.serialize(() => {
  db.run("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, role TEXT)");
  db.run("CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY, name TEXT, description TEXT, price REAL, visible INTEGER)");
  db.run("CREATE TABLE IF NOT EXISTS product_secrets (product_id INTEGER, secret_info TEXT, FOREIGN KEY(product_id) REFERENCES products(id))");
  
  // Check if admin user exists before inserting
  db.get("SELECT * FROM users WHERE username = 'admin'", (err, row) => {
    if (!row) {
      db.run("INSERT INTO users (username, password, role) VALUES ('admin', 'sup3r_s3cr3t_fl4g_4dm1n_p4ssw0rd_!sqdsqlm', 'admin')");
      db.run("INSERT INTO users (username, password, role) VALUES ('guest', 'guest123', 'guest')");
    }
  });
  
  // Insert some products
  db.run("DELETE FROM products");
  db.run("INSERT INTO products (id, name, description, price, visible) VALUES (1, 'Laptop', 'High-performance laptop', 999.99, 1)");
  db.run("INSERT INTO products (id, name, description, price, visible) VALUES (2, 'Smartphone', 'Latest model', 699.99, 1)");
  db.run("INSERT INTO products (id, name, description, price, visible) VALUES (3, 'Security Device', 'Advanced security device', 1299.99, 0)");
  
  // Insert product secrets
  db.run("DELETE FROM product_secrets");
  db.run("INSERT INTO product_secrets (product_id, secret_info) VALUES (1, 'Nothing special here')");
  db.run("INSERT INTO product_secrets (product_id, secret_info) VALUES (2, 'Just a regular phone')");
  db.run("INSERT INTO product_secrets (product_id, secret_info) VALUES (3, 'Spark{s0_M4ny_w4yss_t0_w1N!!!}')");
});

const schema = buildSchema(`
  type User {
    id: String
    username: String
    role: String
  }
  
  type Product {
    id: String
    name: String
    description: String
    price: Float
    secret_info: String
  }
  type Query {
    getUser(username: String): User
    getAllProducts: [Product]
    getProductById(id: String): Product
  }
`);

// Resolver functions
const root = {
  getUser: (args) => {
    return new Promise((resolve, reject) => {
      const query = `SELECT id, username, role FROM users WHERE username = '${args.username}'`;
      
      db.get(query, (err, row) => {
        if (err) {
          reject(err);
        } else {
          resolve(row);
        }
      });
    });
  },
  
  getAllProducts: () => {
    return new Promise((resolve, reject) => {

      db.all("SELECT p.id, p.name, p.description, p.price, s.secret_info FROM products p LEFT JOIN product_secrets s ON p.id = s.product_id WHERE p.visible = 1", (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  },
  
  getProductById: (args) => {
    return new Promise((resolve, reject) => {
      const query = `
        SELECT p.id, p.name, p.description, p.price 
        FROM products p 
        WHERE p.id = ${args.id}
      `;
      
      db.get(query, (err, row) => {
        if (err) {
          reject(err);
        } else {
          resolve(row);
        }
      });
    });
  }
};


const app = express();


app.use(session({
  secret: 'r4m4dhanSP4rKK!!',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}));

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));





app.get('/fetch', (req, res) => {
  const url = req.query.url;
  if (url) {
    if (url === 'http://localhost:4000/internal/admin') {
      req.session.user = { username: 'admin', role: 'admin' };
      res.redirect('/dashboard');
    } else {
      res.send('Error fetching resource');
    }
  } else {
    res.send('URL parameter is required');
  }
});

// Routes
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

const isAdmin = (req, res, next) => {
  if (req.session.user && req.session.user.role === 'admin') {
    console.log("Admin access granted");
    next();
  } else {
    console.log("Admin access denied");
    res.status(403).send("Access denied: you're not the Admin ya hbibi");
  }
};

app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  
  db.get('SELECT * FROM users WHERE username = ? AND password = ?', [username, password], (err, row) => {
    if (err) {
      return res.status(500).send('Database error');
    }
    
    if (row) {
      req.session.user = { username: row.username, role: row.role };
      res.redirect('/dashboard');
    } else {
      res.redirect('/login?error=1');
    }
  });
});

app.get('/dashboard', (req, res) => {
  if (req.session.user) {
    res.sendFile(path.join(__dirname, 'public', 'dashboard.html'));
  } else {
    res.redirect('/login');
  }
});
app.use(express.json());
// GraphQL endpoint (admin only)
app.use('/graphql', isAdmin, graphqlHTTP({
  schema: schema,
  rootValue: root,
  graphiql: true
}));

app.get('/', (req, res) => {
  res.json({ username: 'admin', role: 'admin' });
});


app.get('/api/products', (req, res) => {
  if (!req.session.user) {
    return res.status(401).json({ error: 'Authentication required' });
  }
  
  db.all("SELECT id, name, description, price FROM products WHERE visible = 1", (err, rows) => {
    if (err) {
      res.status(500).json({ error: 'Database error' });
    } else {
      res.json(rows);
    }
  });
});

// API endpoint to get user info
app.get('/api/user', (req, res) => {
  if (req.session.user) {
    res.json({ username: req.session.user.username, role: req.session.user.role });
  } else {
    res.status(401).json({ error: 'Not authenticated' });
  }
});

// Logout route
app.get('/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/login');
});

// Start server
const PORT = process.env.PORT || 4003;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
